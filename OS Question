
/*Q.1 Write a C Program to create a child process using fork (), display parent and
child process id. Child process will display the message “I am Child Process”
and the parent process should display “I am Parent Process”.
*/
#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<unistd.h>
int main()
{
 int pid=fork();
 if(pid>0)
 {
  printf("I am Parent Process...........");
  printf("ID=%d",getpid());
 }
 else if(pid==0)
 {
   printf("I am Child Process..........");
  printf("ID=%d",getpid());
 }
 else
 {
   printf("Failed to create child process............");
 }
}
/*Q.2 Write a C program that demonstrates the use of nice() system call. After a
child Process is started using fork (), assign higher priority to the child using
nice () system call.
*/
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
int main()
{
 int pid=fork();
 if(pid==0)
 {
   printf("\nI am Child Process..........");
   printf("\nProcess Id=%d",getpid());
   printf("\nPriority=%d",nice(19));
 }
 
}


/*Q.3 Write a C program to accept n integers to be sorted. Main function
creates child process using fork system call. Parent process sorts the integers
using bubble sort and waits for child process using wait system call. Child
process sorts the integers using insertion sort.
*/
#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<unistd.h>
void bubble_sort(int a[100],int n)
{
  int i,pass,t;
  for(pass=1;pass<n;pass++)
  {
    for(i=0;i<n-pass;i++)
    {
      if(a[i]>a[i+1])
      { 
            t=a[i];
            a[i]=a[i+1];
            a[i+1]=t;
      }
    }
    }
    printf("\nSorted elements using bubble sort-");
    for(i=0;i<n;i++)
    {
       printf("%d\t",a[i]);
    }
  
}

void insertion_sort(int a[100],int n)
{
  int i,j,t;
  for(i=0;i<n;i++)
  {
    for(j=0;j<n;j++)
    {
      if(a[i]>a[j])
      { 
            t=a[i];
            a[i]=a[j];
            a[j]=t;
      }
    }
    }
    printf("\nSorted elements using insertion sort-");
    for(i=0;i<n;i++)
    {
       printf("%d\t",a[i]);
    }
}

int main()
{
 int a[100],i,n;
 printf("\nEnter Limit-");
 scanf("%d",&n);
 printf("\nEnter n elements-");
 for(i=0;i<n;i++)
 {
   scanf("%d",&a[i]);
 }
 
 int pid=fork();
 if(pid==0)
 {
   printf("\nChild Process");
   printf("\nChild Process id=%d",getpid());
   insertion_sort(a,n);
 }
 else
 {
      printf("\nParent  Process");
   printf("\nParent Process id=%d",getpid());
   bubble_sort(a,n);
 }
}

/*Q.4 Write a C program to illustrate the concept of orphan process. Parent process
creates a child and terminates before child has finished its task. So child
process becomes orphan process. (Use fork(), sleep(), getpid(), getppid()).
=>Orphan processs means if parent proceess is terminate therefore child process involves in execution(perform its task) i.e does not kill by parent process hece child is orphan process
=>parent process terminate keli tari pan child process terminate hot nahi mhnun child is orphan process*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() 
{
    int pid = fork();  // Create a new process

    if (pid < 0) 
    {
        printf("Process is can not be created....");
    }
     else if (pid > 0) 
     {
        printf("\nParent Process is sleeping for 3 seconds...PID=%d", getpid());
        sleep(3);  // Sleep for 3 seconds
        printf("\nParent Process is terminating... PID: %d", getpid());
        exit(0);  // Terminate the parent process
    }
    else 
    {
        printf("\nChild Process  is running...PID=: %d, Parent PID=: %d", getpid(), getppid());
        sleep(5);  // Child does some work for 5 seconds
        printf("\nChild Process  is finishing execution...PID=%d", getpid());
    }
}

Q.5 Write a C program that accepts an integer array. Main function forks child
process. Parent process sorts an integer array and passes the sorted array to
child process through the command line arguments of execve() system call.
The child process uses execve() system call to load new program that uses this
sorted array for performing the binary search to search the particular item in
the array.

/*Q.6 Write a programto implement the toy shell. It should display the command
prompt “myshell$”. Tokenize the command line and execute the given
command by creating the child process. Additionally it should interpret the
following commands.
count c filename:- To print number of characters in the file.
count w filename:- To print number of words in the file.
count l filename :- To print number of lines in the file.
*/
#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
int main(int argc,char *argv[])
{
    FILE *f1;  //declare fie
    f1=fopen(argv[1],"r");  //open file
    if(f1==NULL)  //check file.........
    {
          printf("file not found......");
          exit(0);
    }
   int cnt=0;
   char ch,c;
   ch=argv[2][0];
   switch(ch)
    {
        case 'c':  while(!feof(f1))
                 {
                       c=fgetc(f1);
                       if(isalpha(c))  //only read character value
                       cnt++;
                 }
                    printf("Character count=%d",cnt);
                    break;
     case 'w':  while(!feof(f1))
                 {
                       c=fgetc(f1);
                       if(c=='\n'||c==' ')
                       cnt++;
                 }
                 printf("Word count=%d",cnt);
                    break;
    
    case 'l':  while(!feof(f1))
                 {
                       c=fgetc(f1);
                       if(c=='\n')
                       cnt++;
                 }
                 printf("Line count=%d",cnt);
                    break;
    
    }
}


/*Q.7 Write a program to implement the shell. It should display the command
prompt “myshell$”. Tokenize the command line and execute the given
command by creating the child process. Additionally it should interpret the
following ‘list’ commands as
myshell$ list f dirname
:- To print names of all the files in current
directory.
myshell$ list n dirname :- To print the number of all entries in the current
directory
*/
#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <string.h>
int main(int argc,char *argv[]) 
{
   DIR *dir;
    struct dirent *entry;
    int count = 0;
    dir = opendir(argv[1]);
    if (dir == NULL)
    {
        printf("Not  open directory");
       exit(0);
    }
    printf("Files in directory '%s':\n", argv[1]);
    while ((entry = readdir(dir)) != NULL) 
    {
      if (strcmp(entry->d_name, ".") != 0 && strcmp(entry->d_name, "..") != 0)
      {
            printf("%s\n", entry->d_name);
            count++;
        }
        }
     printf("Total number of entries: %d\n", count);
    closedir(dir);
}


/*Q.8 Write a C program to implement the shell which displays the command
prompt “myshell$”. It accepts the command, tokenize the command line and
execute it by creating the child process. Also implement the additional command
‘typeline’ as
typeline +n filename:- To print first n lines in the file.
typeline -a:- To print all lines in the file.
*/
#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
int main(int argc,char *argv[])
{
    char s1[100];
    int i;
    FILE *f1;
    f1=fopen(argv[1],"r");
    if(f1==NULL)
    {
         printf("file not found......");
         exit(0);
    }
    char ch=argv[2][0];
    if(ch=='a')
    {
        printf("\nAll Lines are-");
        while(!feof(f1))
        {
              fgets(s1,50,f1);
              printf("%s",s1);
        }
    }
    else
    {
      int choice=atoi(argv[2]);
       printf("\nFirst %d lines\n-",choice);
       for(i=0;i<choice;i++)
       {
              fgets(s1,50,f1);
              printf("%s",s1);
       }
    }
}

/*Q.9 Write a programto implement the shell. It should display the command
prompt “myshell$”. Tokenize the command line and execute the given
command by creating the child
process. Additionally it should interpret
the following commands.
myshell$ search f filename pattern :- To display first occurrence of
pattern in the file.
*/
#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#include<string.h>
int main(int argc,char *argv[])
{
   FILE *f1;
   char s1[100],pattern[50];
   int flag=0;
   f1=fopen(argv[1],"r");
   if(f1==NULL)
   {
       printf("File not found.....");
       exit(0);
   }
  int line=1;
   strcpy(pattern,argv[2]);  //pattern=argv[2];
   while(!feof(f1))
   {
      fgets(s1,50,f1);  //fscanf(f1,"%s",&s1);
      if(strstr(s1,pattern)!=NULL)
      {
           flag=1;
            printf("\npattern is found at Line=%d",line);
            break;
      }
      line++;
   }
   if(flag==0)
   printf("\npattern not found......");
}

Q.10 Write the program to simulate FCFS CPU-scheduling. The arrival time and
first CPU-burst of different jobs should be input to the system. Accept no. of
Processes, arrival time and burst time. The output should give Gantt chart,
turnaround time and waiting time for each process. Also find the average
waiting time and turnaround time.

//fcfs
#include<stdio.h>
int main()
{
 int i,j,n,proc[10],at[10],bt[10],temp,btemp;
 printf("Enter  Number of process-");
 scanf("%d",&n);
for(i=0;i<n;i++)
{
printf("Enter Process Number-");
 scanf("%d",&proc[i]);
printf("Enter Arrival time-");
 scanf("%d",&at[i]);
 printf("Enter Burst time-");
 scanf("%d",&bt[i]);
}

for(i=0;i<n;i++)
{
  for(j=0;j<n;j++)
  {
    if(at[i]<bt[j])
    {
        temp=at[i];
        at[i]=at[j];
        at[j]=temp;
        
        btemp=bt[i];
        bt[i]=bt[j];
         bt[j]=btemp;
        
        temp=proc[i];
        proc[i]=proc[j];
        proc[j]=temp;
    }
  }
}
printf("After Sorting arrival time-");
printf("\nProcess No \t Arrival time \tBurst time ");
for(int i=0;i<n;i++)
{
 printf("\nP%d\t",proc[i]);
 printf("%d\t",at[i]);
 printf("%d\t",bt[i]);
}
printf("\n -------------------------------------------------------------------------------------\n");
for(i=0;i<n;i++)
{
 printf("P%d\t|",proc[i]);
}
printf("\n -------------------------------------------------------------------------------------\n");
}
Q.11 Write the program to simulate Non-preemptive Shortest Job First (SJF) –
scheduling. The arrival time and first CPU-burst of different jobs should be
input to the system. Accept no. of Processes, arrival time and burst time. The
output should give Gantt chart, turnaround time and waiting time for each
process. Also find the average waiting time and turnaround time
[1
Q.12 Write a C program to simulate Non preemptive priority scheduling. The
arrival time and first CPU-burst of different jobs should be input to the
system. Accept no. of Processes, arrival time and burst time. The output
should give Gantt chart, turnaround time and waiting time for each
process. Also find the average waiting time and turnaround
time.

Q.13 Write the simulation program for demand paging and show the page
scheduling and total number of page faults according the FIFO page
replacement algorithm. Assume the memory of n frames.
Reference String
: 3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6


//FIFO
#include<stdio.h>
int main()
{
  int a[100],temp[10],n,frames,i,j,flag1=0,flag2=0,fault=0,pos=0;
  printf("Enter Number of pages");
  scanf("%d",&n);
  printf("Enter Page Refference String-");
  for(i=0;i<n;i++)
  {
  scanf("%d",&a[i]);
  }
  printf("Enter number of frames-");
  scanf("%d",&frames);
  //initialize frames to -1
  for(i=0;i<frames;i++)
  {
   temp[i]=-1;
  }
   printf("Page Refference String       Frames");
   //Alredy present........
   for(i=0;i<n;i++)
  {
     flag1=flag2=0;
     for(j=0;j<frames;j++)
     {
          if(temp[j]==a[i])
          {
                   flag1=1;
                   fault++;
                   break;
          }
     }
     //not present......
     if(flag1==0)
     {
     for(j=0;j<frames;j++)
     {
          if(temp[j]==-1)
          {
                 temp[j]=a[i];
                 flag2=1;
                 fault++;
                 break;
          }
     }
   }
   //no empty frame apply fifo algorithm.......
   if(flag2==0)
   {
   temp[pos]=a[i];
   pos=(pos+1)%frames;
   fault++;
   }
 
 //display frames...
   printf("\n%d\t\t\t\t\t",a[i]);
 
 for(j=0;j<frames;j++)
 {
  if(temp[j]!=-1)
  {
   printf("%d\t",temp[j]);
 }
 else
 {
  printf("-");
 }
 }
 }
 printf("Total page faults=%d",fault);
 }
Q.14 Write the simulation program for demand paging and show the page
scheduling and total number of page faults according the LRU page
replacement algorithm. Assume the memory of n frames.
Reference String
: 3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6

Q.15 Write the simulation program for demand paging and show the page
scheduling and total number of page faults according the Optimal page
replacement algorithm. Assume the memory of n frames.
Reference String
: 7, 5, 4, 8, 5, 7, 2, 3, 1, 3, 5, 9, 4, 6,


